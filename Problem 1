// Time Complexity : O(n)
// Space Complexity : O(n^2)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
	public int minCost(int[][] costs) {
		if(costs.length == 0) return 0;

		int[][] dp = new int[costs.length][3];
		dp[0][0] = costs[0][0]; //cost of painting house 0 with red colour 
		dp[0][1] = costs[0][1]; //cost of painting house 0 with blue colour 
		dp[0][2] = costs[0][2]; //cost of painting house 0 with green colour 

		for(int i = 1; i < costs.length; i++) {
    //dp matrix stores min cost for a particular colour and the non-adjacent colour combination
			dp[i][0] = costs[i][0] + Math.min(dp[i - 1][1], dp[i - 1][2]); 
			dp[i][1] = costs[i][1] + Math.min(dp[i - 1][0], dp[i - 1][2]);
			dp[i][2] = costs[i][2] + Math.min(dp[i - 1][0], dp[i - 1][1]);
		}
		return Math.min(dp[costs.length - 1][2], Math.min(dp[costs.length - 1][0], dp[costs.length - 1][1]));
	}
}
